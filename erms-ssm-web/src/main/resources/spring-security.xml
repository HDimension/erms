<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/security
			    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置不拦截的资源-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--
        auto-config="true" 表示springsecurity框架会自动寻找认证页面
            如果我们自己没有提供，则使用springsecurity默认的认证页面
            如果我们自己有认证页面，需要配置才能使用
        use-expressions="true" 如果是true表示使用spring的el表达式进行配置
                                如果是false则可以直接配置
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--对当前项目的所有资源进行拦截-->
        <!--
            <security:intercept-url pattern="/**" 表示要拦截项目中的所有资源
            access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"
            当用户有ROLE_USER角色或者ROLE_ADMIN角色的时候才能访问资源
            其中springsecurity规定角色的名称必须以ROLE_开头。
        -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <!--配置自己的认证页面-->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login.do"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"
                             authentication-success-forward-url="/pages/main.jsp"/>

        <!--关闭csrf拦截，即关闭跨域请求-->
        <security:csrf disabled="true"/>

        <!--配置退出认证信息-->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp"/>
    </security:http>

    <!--
        <security:authentication-manager> security的认证管理[登录信息的来源]
        目前<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
        是在缓存中放入了一个用户。用户名为admin密码为admin当前用户的角色为ROLE_USER
        springsecurity的认证默认是必须加密的。
        如果想不加密认证必须在密码前面加上{noop}
    -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!--配置加密方式-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--密码加密器 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

<!--
    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
-->

    <!--开启注解-->
    <security:global-method-security
            jsr250-annotations="enabled"
            secured-annotations="enabled"
            pre-post-annotations="enabled">
    </security:global-method-security>


</beans>